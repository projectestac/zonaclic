import { emptyNode } from './defaults';
import { siteMetadata } from '../../gatsby-config';
const { supportedLanguages } = siteMetadata;

/**
 * Gets the specific node associated with the current locale from a set of markdown content nodes.
 * Fallbacks to `defaultLocale` or `emptyNode` when requested language is not found.
 * @param {object} data - The GraphQL query results. Should contain the `allMdx` component with an `edges` member.
 * @param {object} intl - Object generated by the `useIntl()` hook (see `gatsby-plugin-intl`)
 * @returns {object} - The resulting markdown node
 */
export const getResolvedVersionForLanguage = (data, intl) => {
  const { locale, defaultLocale } = intl;
  const { node } =
    data.allMdx.edges.find(({ node: { fields: { lang } } }) => lang === locale) ||
    data.allMdx.edges.find(({ node: { fields: { lang } } }) => lang === defaultLocale) ||
    emptyNode;

  return node;
}

/**
 * Gets all nodes related to a specific locale from a set of markdown content nodes.
 * No fallbacks are provided.
 * @param {object} data - The GraphQL query results. Should contain the `allMdx` component with an `edges` member.
 * @param {object} intl - Object generated by the `useIntl()` hook (see `gatsby-plugin-intl`)
 * @returns {object[]} - Array of resulting markdown nodes 
 */
export const getAllResolvedVersionsForLanguage = (data, intl) => {
  const slugs = new Set();
  const nodes = [];

  data.allMdx.edges.forEach(({ node }) => {
    slugs.add(node.fields.slug);
  });

  const { locale, defaultLocale } = intl;
  slugs.forEach(sl => {
    const { node } =
      data.allMdx.edges.find(({ node: { fields: { lang, slug } } }) => slug === sl && lang === locale) ||
      data.allMdx.edges.find(({ node: { fields: { lang, slug } } }) => slug === sl && lang === defaultLocale);
    if (node)
      nodes.push(node);
  });

  return nodes;
}

/**
 * Gets the collection of alternate versions in other languages of a specific markdown content
 * @param {object} data - The GraphQL query results. Should contain the `allMdx` component with an `edges` member. 
 * @param {object} location - The `location` object, used to build the absolute URL to the alternate versions
 * @param {string=} current - Optional parameter indicatibg the current locale. When provided, such versions will be ignored
 * @returns {object[]} - An array of alternate versions, consisting on objects with just two fields: `lang` and `href`
 */
export const getAllVersions = (data, location, current = null) => {
  return data.allMdx.edges
    .filter(({ lang }) => lang !== current)
    .map(({ node: { fields: { lang, slug } } }) => ({ lang, href: `${location.origin}${__PATH_PREFIX__}/${lang}${slug}` }));
}

/**
 * Get the absolute URLs of all available language variants of a specific slug
 * @param {string} slug - Slug to be used as a base
 * @param {Object} location - The `window.location` object
 * @param {string} current - Current language
 */
export const getAllVariants = (slug, location, current) => {
  return supportedLanguages
    .filter(lang => lang !== current)
    .map(lang => ({ lang, href: `${location.origin}${__PATH_PREFIX__}/${lang}${slug}` }));
}
